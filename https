<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tic Tac Toe</title>
  <style>
body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: #3498db; /* fallback for old browsers */
  background: -webkit-linear-gradient(to right, #2980b9, #3498db); /* Chrome 10-25, Safari 5.1-6 */
  background: linear-gradient(to right, #2980b9, #11d6dd); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}

.container {
  text-align: center;
  color: #fff;
}

h1 {
  font-size: 48px;
  margin-bottom: 20px;
  text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.1);
}

.game {
  background-color: rgba(255, 255, 255, 0.8);
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  display: inline-block;
  transition: transform 0.3s ease;
}

.game:hover {
  transform: translateY(-5px);
}

.board {
  display: grid;
  grid-template-columns: repeat(3, 100px);
  grid-gap: 10px;
  width: 320px;
  margin: 0 auto;
  margin-bottom: 20px;
}

.cell {
  width: 100px;
  height: 100px;
  border-radius: 10px;
  background-color: rgba(255, 255, 255, 0.9);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 60px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
.cell {
color: #000;
}

.cell:hover {
  background-color: rgba(255, 255, 255, 0.7);
}

.cell:active {
  transform: scale(0.95);
}

#status-message {
  font-weight: bold;
  margin-bottom: 10px;
  color: #333;
}

#restart-button {
  padding: 10px 20px;
  font-size: 18px;
  cursor: pointer;
  background-color: #2ecc71;
  color: #fff;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

#restart-button:hover {
  background-color: #27ae60;
  transform: scale(1.05);
}

#restart-button:active {
  transform: scale(0.95);
}

</style>
</head>
<body>
  <div class="container">
    <h1>jeus de morpion contre une ia</h1>
    <div class="game">
      <div id="board" class="board">
        <div class="cell" data-cell-index="0"></div>
        <div class="cell" data-cell-index="1"></div>
        <div class="cell" data-cell-index="2"></div>
        <div class="cell" data-cell-index="3"></div>
        <div class="cell" data-cell-index="4"></div>
        <div class="cell" data-cell-index="5"></div>
        <div class="cell" data-cell-index="6"></div>
        <div class="cell" data-cell-index="7"></div>
        <div class="cell" data-cell-index="8"></div>
      </div>
      <p id="status-message"></p>
      <button id="restart-button">Restart</button>
    </div>
  </div>
  <script>
const board = document.getElementById('board');
const statusMessage = document.getElementById('status-message');
const restartButton = document.getElementById('restart-button');
let currentPlayer = 'X';
let gameActive = true;
let gameState = ['', '', '', '', '', '', '', '', ''];

const winningConditions = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
];

function handleCellClick(clickedCellEvent) {
  const clickedCell = clickedCellEvent.target;
  const clickedCellIndex = parseInt(clickedCell.getAttribute('data-cell-index'));

  if (gameState[clickedCellIndex] !== '' || !gameActive) {
    return;
  }

  gameState[clickedCellIndex] = currentPlayer;
  clickedCell.innerHTML = currentPlayer;
  checkWin();
  checkDraw();
  currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
  if (gameActive && currentPlayer === 'O') {
    makeAIMove();
  }
}

function checkWin() {
  for (let i = 0; i < winningConditions.length; i++) {
    const [a, b, c] = winningConditions[i];
    if (
      gameState[a] !== '' &&
      gameState[a] === gameState[b] &&
      gameState[a] === gameState[c]
    ) {
      gameActive = false;
      statusMessage.innerHTML = `${gameState[a]} wins!`;
      return;
    }
  }
}

function checkDraw() {
  let roundDraw = !gameState.includes('');
  if (roundDraw) {
    gameActive = false;
    statusMessage.innerHTML = 'Draw!';
  }
}

function makeAIMove() {
  let bestScore = -Infinity;
  let bestMove;
  for (let i = 0; i < gameState.length; i++) {
    if (gameState[i] === '') {
      gameState[i] = 'O';
      let score = minimax(gameState, 0, false);
      gameState[i] = '';
      if (score > bestScore) {
        bestScore = score;
        bestMove = i;
      }
    }
  }
  gameState[bestMove] = 'O';
  const cell = document.querySelector(`[data-cell-index="${bestMove}"]`);
  cell.innerHTML = 'O';
  checkWin();
  checkDraw();
  currentPlayer = 'X';
}

function minimax(board, depth, isMaximizing) {
  let result = checkWinner();
  if (result !== null) {
    if (result === 'X') {
      return -10 + depth;
    } else if (result === 'O') {
      return 10 - depth;
    } else {
      return 0;
    }
  }

  if (isMaximizing) {
    let bestScore = -Infinity;
    for (let i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = 'O';
        let score = minimax(board, depth + 1, false);
        board[i] = '';
        bestScore = Math.max(score, bestScore);
      }
    }
    return bestScore;
  } else {
    let bestScore = Infinity;
    for (let i = 0; i < board.length; i++) {
      if (board[i] === '') {
        board[i] = 'X';
        let score = minimax(board, depth + 1, true);
        board[i] = '';
        bestScore = Math.min(score, bestScore);
      }
    }
    return bestScore;
  }
}

function checkWinner() {
  for (let i = 0; i < winningConditions.length; i++) {
    const [a, b, c] = winningConditions[i];
    if (
      gameState[a] !== '' &&
      gameState[a] === gameState[b] &&
      gameState[a] === gameState[c]
    ) {
      return gameState[a];
    }
  }
  if (!gameState.includes('')) {
    return 'tie';
  }
  return null;
}

function restartGame() {
  currentPlayer = 'X';
  gameActive = true;
  gameState = ['', '', '', '', '', '', '', '', ''];
  statusMessage.innerHTML = '';
  document.querySelectorAll('.cell').forEach(cell => cell.innerHTML = '');
}

board.addEventListener('click', handleCellClick);
restartButton.addEventListener('click', restartGame);

</script>
</body>
</html>
